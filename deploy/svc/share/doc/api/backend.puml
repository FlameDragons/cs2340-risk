@startuml

package app.models #EEEEEE {
  ' ---------------
  ' PlayerSettings.scala
  ' ---------------

  class PlayerSettings << (A, lightBlue) case class >> {
    +name: String
    +ordinal: Int
  }
  class PlayerSettings_ as "PlayerSettings" << (O, violet) object >> {
    +MaxNameLength: Int
    +isValid(arg: PlayerSettings): Boolean
    +formatInvalid(userData: PlayerSettings): String
  }
  PlayerSettings .. PlayerSettings_

  ' ---------------
  ' GameLobbyState.scala
  ' ---------------

  enum GameLobbyState << Enumeration >> {
    +Lobby
    +InGame
  }

  ' ---------------
  ' Color.scala
  ' ---------------

  class Color << (A, lightBlue) case class >> {
    +hex: String
  }

  ' ---------------
  ' Player.scala
  ' ---------------

  class Player << (A, lightBlue) case class >> {
    +settings: Option[PlayerSettings]
    +equals(a: Any): Boolean
    +hashCode(): Int
  }
  class Player_ as "Player" <<< (O, violet) object >> {
    +idLength: Int
    #generateId(len: Int): WrappedString
    #isIdChar(c: Char): Boolean
    +apply(name: String, color: Color): Player
    +apply(): Player
  }
  Player .. Player_
  Color <-- Player_
  app.common.UniqueIdProvider <|.. Player_ : "T: [WrappedString]"
  together {
    class Player
    class Player_
  }
}

package app.common #EEEEEE {
  ' ---------------
  ' Util.scala
  ' ---------------

  class Util << (O, violet) object >> {
    -AlphanumericChars: Seq[Char]
    +Alphanumeric: List[Range]
    +isAlphanumeric(c: Char): Boolean
    +randomString(length: Int): String
    +randomString(length: Int, from: Seq[Char]): String
    +remove[A, B >: A](elem: B, list: Seq[A]): Seq[A]
    +listBuffer[B](traversableOnce: TraversableOnce[B]): ListBuffer[B]
    +buffer[B](traversableOnce: TraversableOnce[B]): mutable.Buffer[B]
  }

  ' ---------------
  ' Resources.scala
  ' ---------------

  class Resources << (O, violet) object >> {
    +UserForm: Form
    +MakeUrl: Call
    NonHostSubmitURL: Call
    -- Config Loaded Values --
  }
  Resources *-- ConfigKeys
  Resources *-- ConfigLoader
  class ConfigKeys << (O, violet) object >> {
    -- Keys for Each Config Loaded Value --
  }
  class ConfigLoader << (O, violet) object >> {
    +load(config: Configuration, environment: Environment): Unit
    +loadGameboard(configuration: Configuration): Gameboard
    +parseNode(config: Config, edges: Seq[(Int, Int)]): Node
    +parseConnection(config: Config): Connection
    +toFloat(in: Any): Option[Float]
    +get[B](key: String, map: (Config, String) => B)(implicit config: Config): Option[B]
    +getList[B](key: String, map: util.ArrayList[_] => B)(implicit config: Config): Seq[B]
    +getPair[B](subConfig: Config, subKeys: (String, String), \n    map: (Config, String) => B)(implicit config: Config): (B, B)
    +toTuple2[B](list: Seq[B]): (B, B)
    +getAbTuples(key: String)(implicit config: Config): Seq[(Int, Int)]
    +getLocation(key: String, subKeys: (String, String) = ("a", "b"))\n    (implicit config: Config): Location
    +list[B](key: String, map: ConfigObject => B)(implicit config: Config): Seq[B]
    +configList(key: String)(implicit config: Config): Seq[Config]
    +loadOrThrow[A](oa: Option[A], key: String): A
  }

  together {
    class app.common.UniqueIdProvider
    class app.common.UniqueValueManager
  }

  ' ---------------
  ' UniqueIdProvider.scala
  ' ---------------

  class "UniqueIdProvider[T <: StringLike[_]]" as UniqueIdProvider<T> << (T, yellow) trait >> {
    #Ids: mutable.HashSet[T]
    #issueId(id: T): Unit
    #returnId(id: T): Unit
    +generateAndIssueId: T
    +isValidId(id: T): Boolean
    +contains(id: T): Boolean
    .. Abstract methods ..
    {abstract} +idLength(): Int
    {abstract} #generateId(len: Int): T
    {abstract} #isIdChar(c: Char): Boolean
  }

  ' ---------------
  ' UniqueValueManager.scala
  ' ---------------

  class "UniqueValueManager[T <: Product]" as UniqueValueManager<T> << (T, yellow) trait >> {
    #values: Option[List[mutable.HashSet[Any]]]
    +isUnique(t: T): Boolean
    +add(t: T): Unit
    +remove(t: T): Unit
  }
}

class Actor
class ActorRef
package app.actors #EEEEEE {
  ' ---------------
  ' Game.scala
  ' ---------------

  class Game_ as "Game" << (O, violet) object >> {
    +idLength: Int
    -IdCharsSet: Set[Char]
    #generateId(len: Int)
    #isIdChar(c: Char)
    +props(): Props
    +apply(id: String, hostInfo: PlayerSettings): Props
  }

  Actor <|-- Game
  app.common.UniqueValueManager <|.. Game : "T: [PlayerSettings]"
  app.common.UniqueIdProvider <|.. Game_ : "T: [WrappedString]"
  Game .. Game_
  PlayerSettings <-- Game
  PlayerSettings <-- Game_
  ActorRef <-- Game

  class CanBeHosted << (A, lightBlue) case class >>
  class CanBeJoined << (A, lightBlue) case class >>
  Game_ *.. CanBeHosted
  Game_ *.. CanBeJoined

  class Game << Actor >> {
    +Game(gameMode: GameMode, id: String, hostInfo: PlayerSettings)
    +initialHostSettings: Option[PlayerSettings]
    +players: mutable.LinkedHashMap[String, PlayerWithActor]
    +connected: mutable.LinkedHashMap[String, PlayerWithActor]
    +stream: FileInputStream
    +config: String
    +pingCheckingTask: Option[Cancellable]
    +currentResponseTimes: mutable.LinkedHashMap[String, Long]
    +host: Option[PlayerWithActor]
    +state: State
    +gameState: Option[GameState]

    +hasInitialHostJoined(): Boolean
    +hasHost(): Boolean
    +startGame(): Unit
    +receive(): Receive
    +receiveGlobal(globalPacket: GlobalPacket): Unit
    +receiveLobby(lobbyPacket: LobbyPacket): Unit
    +receiveInGame(inGamePacket: InGamePacket): Unit
    +broadcastCallback(packet: OutPacket, exclude: Option[String]): Unit
    +sendCallback(packet: OutPacket, target: String): Unit
    +playerConnect(playerId: String, actor: ActorRef): Unit
    +requestPlayerJoin(playerId: String, withSettings: PlayerSettings): Unit
    +requestStartGame(playerId: String): Unit
    +playerDisconnect(playerId: String): Unit
    +removePotentialHost(playerId: String): Unit
    +notifyGame(packet: OutPacket, exclude: Option[ActorRef]): Unit
    +constructGameUpdate(): OutPacket
    +constructGameUpdate(): OutPacket
    +packetInvalidState(p: InPacket): Unit
    +badPacket(p: InPacket): Unit
    +removePlayer(id: String): Unit
  }

  ' ---------------
  ' GameSupervisor.scala
  ' ---------------

  GameSupervisor *.. GameExists
  GameSupervisor *.. MakeGame
  GameSupervisor *.. CanHost
  GameSupervisor *.. CanJoin
  PlayerSettings *-- MakeGame
  ActorRef <-- GameSupervisor

  together {
    class CanHost
    class CanJoin
    class MakeGame
    class GameExists
  }
  class CanHost << (A, lightBlue) case class >> {
    +id: String
  }
  class CanJoin << (A, lightBlue) case class >> {
    +id: String
  }
  class MakeGame << (A, lightBlue) case class >> {
    +hostInfo: PlayerSettings
  }
  class GameExists << (A, lightBlue) case class >> {
    +id: String
  }
  enum CanHost_ as "CanHost" << Enumeration >> {
    +Yes
    +InvalidId
    +Hosted
    +Started
  }
  enum CanJoin_ as "CanJoin" << Enumeration >> {
    +Yes
    +InvalidId
    +Started
  }
  CanHost .. CanHost_
  CanJoin .. CanJoin_

  Actor <|-- GameSupervisor
  class GameSupervisor << Actor >> {
    +games: mutable.HashMap[String, ActorRef]
    +timeout: Timeout
    +receive(): Receive
  }
  GameSupervisor *-- Game : "0..n\n has indirect\n reference to"

  ' ---------------
  ' PlayerWithActor.scala
  ' ---------------

  class PlayerWithActor << (A, lightBlue) case class >> {
    +id: String
    +player: Player
    +actor: ActorRef
  }
  Player <-- PlayerWithActor
  ActorRef <-- PlayerWithActor
  PlayerWithActor --* Game : "0..n"
}

class MessagesAbstractController
class DefaultHttpErrorHandler
class "Reads[T]" as Reads<T>
class "Writes[T]" as Writes<T>

package app.controllers #EEEEEE {
  ' ---------------
  ' ErrorHandler.scala
  ' ---------------

  class ErrorHandler << Singleton >> {
    +ErrorHandler @Inject() (env: Environment, config: Configuration,\n    sourceMapper: OptionalSourceMapper, router: Provider[Router])
    +onClientError(request: RequestHeader, statusCode: Int,\n    message: String): Future[Result]

  }
  class ErrorHandler_ as "ErrorHandler" << (O, violet) object >> {
    +renderErrorPage(statusCode: Int, message: String): Result
    +renderErrorPage(status: Status, message: String): Result
    +onProdServerError(request: RequestHeader,\n    exception: UsefulException): Future[Result]
  }
  DefaultHttpErrorHandler <|-- ErrorHandler
  ErrorHandler .. ErrorHandler_

  ' ---------------
  ' SameOriginCheck.scala
  ' ---------------

  class SameOriginCheck << (T, yellow) trait >> {
    +logger: Logger
    +sameOriginCheck(rh: RequestHeader): Boolean
    .. Abstract methods ..
    {abstract} +validOrigin(origin: String): Boolean
  }

  ' ---------------
  ' MainController.scala
  ' ---------------

  class MainController {
    +MainController @Inject() (cached: Cached, cc: MessagesControllerComponents,\n    config, actorSystem: ActorSystem, \n    @Named("game-supervisor") gameSupervisor: ActorRef) \n    (implicit ec: ExecutionContext)
    +logger: Logger
    +timeout: Timeout
    +validOrigin(path: String): Boolean
    .. HTTP handlers ..
    +index(): EssentialAction
    +make(): Action[AnyContent]
    +host(id: String): Action[AnyContent]
    +lobby(id: String): Action[AnyContent]
    +spaEntryPoint()(implicit header: RequestHeader): Result
    +makePlayerIdCookie()(implicit request: RequestHeader): Cookie
    +redirectIndex(): Action[AnyContent]
    +publicConfig(): Action[AnyContent]
    +routeFiles(path: String): Action[AnyContent]
    .. WebSocket handlers ..
    +webSocket(gameId: String, playerId: String): WebSocket
    +messageFlowTransformer: MessageFlowTransformer[InPacket, OutPacket]
    +playerActorSource: Source[OutPacket, ActorRef]
    +flow(gameId: String, playerId: String): Flow[InPacket, OutPacket, ActorRef]
  }
  MessagesAbstractController <|-- MainController
  SameOriginCheck <|.. MainController

  ' ---------------
  ' Packets.scala
  ' ---------------

  class InPacket << (S, white) sealed trait >> {
    +gameId: String
    +playerId: String
    +unapply(packet: InPacket): (String, String)
  }
  class LobbyPacket << (S, white) sealed trait >>
  class InGamePacket << (S, white) sealed trait >>
  class GlobalPacket << (S, white) sealed trait >>
  InPacket <|-- LobbyPacket
  InPacket <|-- InGamePacket
  InPacket <|-- GlobalPacket

  class PlayerConnect << (A, lightBlue) case class >> {
    +gameId: String
    +playerId: String
    +actor: ActorRef
  }
  class RequestPlayerJoin << (A, lightBlue) case class >> {
    +gameId: String
    +playerId: String
    withSettings: PlayerSettings
  }
  class PlayerDisconnect << (A, lightBlue) case class >> {
    +gameId: String
    +playerId: String
  }
  class RequestStartGame << (A, lightBlue) case class >> {
    +gameId: String
    +playerId: String
  }
  class PingResponse << (A, lightBlue) case class >> {
    +gameId: String
    +playerId: String
  }
  class RequestPlaceReinforcements << (A, lightBlue) case class >> {
    +gameId: String
    +playerId: String
    {field} +assignments: Seq[(Int, Int)]
  }
  LobbyPacket <|-- PlayerConnect
  LobbyPacket <|-- RequestPlayerJoin
  GlobalPacket <|-- PlayerDisconnect
  LobbyPacket <|-- RequestStartGame
  GlobalPacket <|-- PingResponse
  InGamePacket <|-- RequestPlaceReinforcements
  together {
    class InPacket
    class LobbyPacket
    class GlobalPacket
    class InGamePacket
    class PlayerConnect
    class RequestPlayerJoin
    class PlayerDisconnect
    class RequestStartGame
    class PingResponse
    class RequestPlaceReinforcements
  }

  class OutPacket << (S, white) sealed trait >>
  class GameLobbyUpdate << (A, lightBlue) case class >> {
    +seq: Seq[PlayerSettings]
    +host: Int
  }
  class RequestReply << (A, lightBlue) case class >> {
    +response: Response
    +message: String
  }
  class BadPacket << (A, lightBlue) case class >> {
    +message: String
  }
  class StartGame << (A, lightBlue) case class >> {
    +identity: String
  }
  class UpdatePlayerState << (A, lightBlue) case class >> {
    +seq: Seq[PlayerState]
    +turn: Int
  }
  class PingPlayer << (A, lightBlue) case class >> {
    +identity: String
  }
  class SendConfig << (A, lightBlue) case class >> {
    +config: String
  }
  class SendGameboard << (A, lightBlue) case class >> {
    +gameboard: Gameboard
  }
  class UpdateBoardState << (A, lightBlue) case class >> {
    {field} +armies: Map[Int, (Int, Int)])
  }
  class UpdateBoardState_ as "UpdateBoardState" <<< (O, violet) object >> {
    +apply(state: GameState): UpdateBoardState
  }
  UpdateBoardState .. UpdateBoardState_
  OutPacket <|-- GameLobbyUpdate
  OutPacket <|-- RequestReply
  OutPacket <|-- BadPacket
  OutPacket <|-- StartGame
  OutPacket <|-- UpdatePlayerState
  OutPacket <|-- PingPlayer
  OutPacket <|-- SendConfig
  OutPacket <|-- SendGameboard
  OutPacket <|-- UpdateBoardState
  RequestReply <-- RequestResponse
  together {
    class OutPacket
    class GameLobbyUpdate
    class RequestReply
    class BadPacket
    class StartGame
    class UpdatePlayerState
    class PingPlayer
    class SendConfig
    class SendGameboard
    class UpdateBoardState
    class RequestResponse
  }

  enum RequestResponse << Enumeration >> {
    +Accepted
    +Rejected
  }

  class "UnusedFormat[T <: InPacket]" as UnusedFormat<T> {
    +reads(json: JsValue): JsResult[T]
  }
  Reads <.. UnusedFormat

  class PayloadWrites {
    +writes(data: Seq[(String, Any)])
  }
  Writes <.. PayloadWrites : "T: Seq[(String, Any)]"

  class JsonMarshallers <<< (O, violet) object >> {
   .. Writes for data types ..
   .. Reads for data types ..
  }
  Reads --o JsonMarshallers : "many"
  Writes --o JsonMarshallers : "many"
  JsonMarshallers <-- PayloadWrites
  JsonMarshallers <-- UnusedFormat
  JsonMarshallers <-- InPacket
  JsonMarshallers <-- OutPacket

  together {
    class JsonMarshallers
    class Writes
    class Reads
  }

  Game <-- InPacket
  Game <-- OutPacket
}

package app.game #EEEEEE {
  ' ---------------
  ' Territory.scala
  ' ---------------

  class Territory << (A, lightBlue) case class >> {
    +connections: Set[Int]
    +castle: Option[Location]
    +hasCastle(): Boolean
  }
  Territory *-- Location

  ' ---------------
  ' Army.scala
  ' ---------------

  class Army << (A, lightBlue) case class >> {
    +size: Int
  }

  ' ---------------
  ' OwnedArmy.scala
  ' ---------------

  class OwnedArmy << (A, lightBlue) case class >> {
    +army: Army
    +owner: Player
  }
  OwnedArmy *-- Army

  ' ---------------
  ' Connection.scala
  ' ---------------

  class Connection << (A, lightBlue) case class >> {
    +a: Int
    +b: Int
    {field} +midpoints: Seq[(Float, Float)]
    +bz: Boolean
    +tension: Float
  }

  ' ---------------
  ' Gameboard.scala
  ' ---------------

  class Gameboard << (A, lightBlue) case class >> {
    +nodes: Seq[Node]
    +regions: Seq[Range]
    +waterConnections: Seq[Connection]
    +size: Location
    +nodeCount(): Int
  }
  Gameboard *-- Node
  Gameboard *-- Connection
  Gameboard *-- Location
  class Location << (A, lightBlue) case class >> {
    +a: Float
    +b: Float
  }
  class Location_ as "Location" << (O, violet) object >> {
    +apply(tup: (Float, Float)): Location
  }
  Location .. Location_
  class Node << (A, lightBlue) case class >> {
    +path: String
    +iconPath: String
    +center: Location
    +dto: Territory
  }
  Node *-- Location
  Node *-- Territory

  ' ---------------
  ' PlayerState.scala
  ' ---------------

  class State << (S, white) sealed trait >>
  class Reinforcement << (J, tan) case object >>
  class Attack << (J, tan) case object >>
  class Maneuver << (J, tan) case object >>
  class Idle << (J, tan) case object >>
  State <|-- Reinforcement
  State <|-- Attack
  State <|-- Maneuver
  State <|-- Idle

  class TurnState << (A, lightBlue) case class >> {
    +state: State
    {field} +payload: (String, Any)*
  }
  TurnState *-- State

  class PlayerState << (A, lightBlue) case class >> {
    +player: Player
    +units: Army
    +turnState: TurnState
  }
  PlayerState *-- Player
  PlayerState *-- Army
  PlayerState *-- TurnState

  ' ---------------
  ' GameState.scala
  ' ---------------

  class GameState {
    +GameState(_turnOrder: Seq[PlayerWithActor], territories: Int)
    -_turnOrder: Seq[PlayerWithActor]
    +playerStates: mutable.Buffer[PlayerState]
    +boardState: mutable.Buffer[Option[OwnedArmy]]
    +turn: Int
    +gameSize(): Int
    +turnOrder(): Seq[PlayerWithActor]
    +turnOrder_=(newOrder: Seq[PlayerWithActor]): Unit
  }
  GameState o-- PlayerWithActor : "0..n"
  GameState o-- PlayerState : "0..n"
  GameState o-- OwnedArmy : "0..n"

  package mode #CCCCCC {
    ' ---------------
    ' GameMode.scala
    ' ---------------

    class CallbackFlag << (S, white) sealed trait >>
    class Broadcast << (J, tan) case object >>
    class Send << (J, tan) case object >>
    CallbackFlag <|-- Broadcast
    CallbackFlag <|-- Send

    class Callback << (A, lightBlue) case class >> {
      {field} +broadcast: (OutPacket, Option[String]) => Unit
      {field} +send: (OutPacket, String) => Unit
      +apply(payload: (OutPacket, Option[String]), flag: CallbackFlag): Unit
    }
    Callback <-- CallbackFlag

    class GameMode << (T, yellow) trait >> {
      +makeGameState(turnOrder: Seq[PlayerWithActor]): GameState
      +initializeGame(joinOrder: List[PlayerWithActor], callback: Callback): GameState
      .. Abstract methods ..
      {abstract} +gameboard(): Gameboard
      {abstract} +assignTurnOrder(players: Seq[PlayerWithActor]): Seq[PlayerWithActor]
      {abstract} +initializeGameState(callback: Callback)(implicit state: GameState): Unit
      {abstract} +handlePacket(packet: InGamePacket, callback: Callback)(implicit state: GameState): Unit
      {abstract} +playerDisconnect(player: PlayerWithActor, callback: Callback)(implicit state: GameState): Unit
    }
    GameMode <-- Callback
    GameMode <-- PlayerWithActor
    GameMode *-- Gameboard : "1"
    GameMode <-- GameState

    ' ---------------
    ' SkirmishGameMode.scala
    ' ---------------

    class SkirmishGameMode {
      {field} +lazy override val gameboard: Gameboard
      +assignTurnOrder(players: Seq[PlayerWithActor]): Seq[PlayerWithActor]
      +initializeGameState(callback: Callback)(implicit state: GameState): Unit
      +reinforcement(player: Player)(implicit state: GameState): TurnState
      +calculateReinforcement(player: Player)(implicit state: GameState): Int
      +calculateAllocations(implicit state: GameState): Seq[Int]
      +handlePacket(packet: InGamePacket, callback: Callback)(implicit state: GameState): Unit
      +requestReplaceReinforcements(callback: GameMode.Callback, actor: PlayerWithActor,\n    assignments: Seq[(Int, Int)])(implicit state: GameState): Unit
      +playerDisconnect(player: PlayerWithActor, callback: Callback)(implicit state: GameState): Unit
    }
    GameMode <|-- SkirmishGameMode
    SkirmishGameMode <-- Callback
    SkirmishGameMode <-- PlayerWithActor
    SkirmishGameMode *-- Gameboard : "1"
    SkirmishGameMode <-- GameState
    SkirmishGameMode <-- TurnState
  }
}

hide empty members

@enduml